#ifndef GGAFDX9GEOMETRICACTOR_H_
#define GGAFDX9GEOMETRICACTOR_H_
namespace GgafDx9Core {

/**
 * 座標を持ったのアクター.
 * ワールド座標、或いは変換済み座標の何れかを持ち、<BR>
 * 座標関連メソッドを備えたアクターです。<BR>
 */
class GgafDx9GeometricActor : public GgafDx9BaseActor {

private:

public:

    /** 変換済み座標であるか */
    bool _isTransformed;

    /** ワールドX座標 */
    int _X;
    /** ワールドY座標 */
    int _Y;
    /** ワールドZ座標 */
    int _Z;
    /** ワールドX軸回転角 */
    angle _RX;
    /** ワールドY軸回転角 */
    angle _RY;
    /** ワールドZ軸回転角 */
    angle _RZ;
    /** ワールドX軸方向倍率 */
    int _SX;
    /** ワールドY軸方向倍率 */
    int _SY;
    /** ワールドZ軸方向倍率 */
    int _SZ;

    D3DXMATRIX _matWorld; //自身の現在のWorld変換行列
    //補足
    //【_X, _Y, _Z の単位について】
    //　採り得る値は DirectXワールド座標(float)の 1000倍の整数値である。
    //　描画の直前に 1000 で除算されワールド変換に使用される。
    //　なんでかというと整数で座標計算して少しでも速くしたかったため。
    //　昔は良く使った手法だが、floatでも早いので、よかったのかどうか微妙。
    //【_RX, _RY, _RZ の単位について】
    //　独自単位の「アングル値」を採る。「アングル値」とは 0~360000 の値で、1000倍の精度の角度値である。
    //　円周角と同じく3時の方向を0とし、反時計回りにアングル値は増えるものとする。直角の値は90000、水平は180000である。
    //【_SX, _SY, _SZ の単位について】
    //　描画の直前に 1000 で除算され、拡大縮小の変換に使用される。
    //　1000が１倍のスケール意味する。したがってデフォルトは1000になっている。


    /** 変換済み画面X座標 */
    float _x;
    /** 変換済み画面Y座標 */
    float _y;
    /** 深度 (0.0 <= _z < 1.0) */
    float _z;


    GgafDx9Checker* _pChecker;

    const int _X_OffScreenLeft;
    const int _X_OffScreenRight;
    const int _Y_OffScreenTop;
    const int _Y_OffScreenBottom;

    /**
     * コンストラクタ<BR>
     * @param	prm_name 識別名
     */
    GgafDx9GeometricActor(const char* prm_name,
                              GgafDx9Checker* prm_pChecker);

    virtual GgafDx9GeometricActor* getPrev() {
        return (GgafDx9GeometricActor*)GgafActor::getPrev();
    }

    virtual GgafDx9GeometricActor* getNext() {
        return (GgafDx9GeometricActor*)GgafActor::getNext();
    }

    virtual bool processBumpChkLogic(GgafActor* prm_pActor_Opponent);

    virtual bool isOffScreen();

    virtual void setGeometry(int X, int Y, int Z) {
        _X = X;
        _Y = Y;
        _Z = Z;
    }

    virtual void setGeometry(GgafDx9GeometricActor* prm_pActor) {
        _X = prm_pActor->_X;
        _Y = prm_pActor->_Y;
        _Z = prm_pActor->_Z;
    }

    /**
     * world変換行列設定 .
     * 拡大縮小 × X軸回転 × Z軸回転 × Y軸回転 × 平行移動 の変換行列を設定<BR>
     * ※XYZの順でないことに注意<BR>
     * @param prm_pActor [in]対象アクター
     * @param out_matWorld [out]world変換行列
     */
    static void getWorldMatrix_ScRxRzRyMv(GgafDx9GeometricActor* prm_pActor, D3DXMATRIX& out_matWorld);


    /**
     * world変換行列設定 .
     * X軸回転 × Z軸回転 × Y軸回転 × 拡大縮小 × 平行移動 の変換行列を設定<BR>
     * ※XYZの順でないことに注意<BR>
     * @param prm_pActor [in]対象アクター
     * @param out_matWorld [out]world変換行列
     */
    static void getWorldMatrix_RxRzRyScMv(GgafDx9GeometricActor* prm_pActor, D3DXMATRIX& out_matWorld);

    /**
     * world変換行列設定 .
     * X軸回転 × Y軸回転 × Z軸回転 × 拡大縮小 × 平行移動 の変換行列を設定<BR>
     * @param prm_pActor [in]対象アクター
     * @param out_matWorld [out]world変換行列
     */
    static void getWorldMatrix_RxRyRzScMv(GgafDx9GeometricActor* prm_pActor, D3DXMATRIX& out_matWorld);

    /**
     * world変換行列設定 .
     * X軸回転 × Y軸回転 × X軸回転 × 拡大縮小 × 平行移動 の変換行列を設定<BR>
     * ※Y軸回転がありません。_RYが２回目のX軸回転となる<BR>
     * @param prm_pActor [in]対象アクター
     * @param out_matWorld [out]world変換行列
     */
    static void getWorldMatrix_RxRzRxScMv(GgafDx9GeometricActor* prm_pActor, D3DXMATRIX& out_matWorld);


    static void updateWorldMatrix_Mv(GgafDx9GeometricActor* prm_pActor, D3DXMATRIX& out_matWorld);

    /**
     * world変換行列設定 .
     * 単位行列 × Z軸回転 × 平行移動 の変換行列を設定<BR>
     * @param prm_pActor [in]対象アクター
     * @param out_matWorld [out]world変換行列
     */
    static void getWorldMatrix_RzMv(GgafDx9GeometricActor* prm_pActor, D3DXMATRIX& out_matWorld);

    /**
     * world変換行列設定 .
     * 単位行列 × 拡大縮小 × Z軸回転 × 平行移動 の変換行列を設定<BR>
     * @param prm_pActor [in]対象アクター
     * @param out_matWorld [out]world変換行列
     */
    static void getWorldMatrix_ScRzMv(GgafDx9GeometricActor* prm_pActor, D3DXMATRIX& out_matWorld);

    /**
     * world変換行列設定 .
     * ビルボードX軸回転 × ビルボードY軸回転 × ビルボードZ軸回転  × 拡大縮小 × 平行移動　の変換行列を作成＆デバイスに設定 <BR>
     * @param prm_pActor [in]対象アクター
     * @param out_matWorld [out]world変換行列
     */
    static void getWorldMatrix_BillBoardXYZ_ScMv(GgafDx9GeometricActor* prm_pActor, D3DXMATRIX& out_matWorld);

    static void getWorldMatrix_BillBoardX_RzRyScMv(GgafDx9GeometricActor* prm_pActor, D3DXMATRIX& out_matWorld);

    virtual ~GgafDx9GeometricActor(); //デストラクタ
};

}
#endif /*GGAFDX9GEOMETRICACTOR_H_*/
