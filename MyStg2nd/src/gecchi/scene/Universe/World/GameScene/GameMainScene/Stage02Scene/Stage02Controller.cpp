#include "stdafx.h"
using namespace std;
using namespace GgafCore;
using namespace GgafDx9Core;
using namespace GgafDx9LibStg;
using namespace MyStg2nd;

Stage02Controller::Stage02Controller(const char* prm_name) : DefaultScene(prm_name) {
    _class_name = "Stage02Controller";

    _pBgmPerformer->useBgm(3);
    _pBgmPerformer->set(0, "BGM_01_01");
    _pBgmPerformer->set(1, "BGM_01_02");
    _pBgmPerformer->set(2, "BGM_01_03");
    // 以下の gen01 start 〜 end はExcelマクロにより自動生成されたコードです。
    // コードの変更は「シーンCreater.xls」から行う事とする（整合性確保のため）。
    // gen01 start
    frame f[] = {1,3,1200,3000};
    _paFrame_NextEvent = new frame[4];
    for (int i = 0; i < 4; i++) {
        _paFrame_NextEvent[i] = f[i];
    }
    orderSceneToFactory(510273, Stage02_01, "Stage02_01");
    // gen01 end
}

void Stage02Controller::initialize() {
    _pBgmPerformer->play(0, DSBVOLUME_MIN, true);
    _pBgmPerformer->fadein(0, 420);
    changeProgress(STAGE02CONTROLLER_SCENE_PROG_INIT);
}

void Stage02Controller::processBehavior() {
    // 以下の gen02 start 〜 end はExcelマクロにより自動生成されたコードです。
    // コードの変更は「シーンCreater.xls」から行う事とする（整合性確保のため）。
    // gen02 start
    if (getActivePartFrame() == _paFrame_NextEvent[_iCnt_Event]) {
        switch (getActivePartFrame()) {
            case 1:
                break;
            case 3:
                {
                Stage02_01* pScene = (Stage02_01*)obtainSceneFromFactory(510273);
                addSubLast(pScene);
                changeProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_01_BEGIN);
                }
                break;
            case 1200:
                orderSceneToFactory(510373000, Stage02_Climax, "Stage01_Climax");
                break;
            case 3000:
                {
                Stage02_Climax* pScene = (Stage02_Climax*)obtainSceneFromFactory(510373000);
                addSubLast(pScene);
                changeProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_CLIMAX_BEGIN);
                }
                break;
            default :
                break;
        }
        _iCnt_Event = (_iCnt_Event < 4-1 ? _iCnt_Event+1 : _iCnt_Event);
    }
    // gen02 end

    if (onActiveProgress(STAGE02CONTROLLER_SCENE_PROG_INIT)) {
        _TRACE_("Stage02Controller::processBehavior はいはいDemoさんありがとう、私も起動しましたよ");

    }

    if (onActiveProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_01_BEGIN)) {
        //STG02_01開始処理

        changeProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_01_PLAYING);
    } else if (getProgress() == STAGE02CONTROLLER_SCENE_PROG_STG02_01_PLAYING) {
        //STG02_01最中の処理

    }

//    if (onActiveProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_02_BEGIN)) {
//        //STG02_02開始処理
//        _pBgmPerformer->fadeout_stop(0, 420);        //BGM０番フェードアウト
//        _pBgmPerformer->play(1, DSBVOLUME_MIN, true);//BGM１番フェードイン
//        _pBgmPerformer->fadein(1, 420);
//        changeProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_02_PLAYING);
//    } else if (getProgress() == STAGE02CONTROLLER_SCENE_PROG_STG02_02_PLAYING) {
//        //STG02_02最中の処理
//
//    }
//
//    if (onActiveProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_03_BEGIN)) {
//        //STG02_03開始処理
//
//        changeProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_03_PLAYING);
//    } else if (getProgress() == STAGE02CONTROLLER_SCENE_PROG_STG02_03_PLAYING) {
//        //STG02_03最中の処理
//
//    }

    if (onActiveProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_CLIMAX_BEGIN)) {
        //STG02_Climax開始処理
        _pBgmPerformer->fadeout_stop(1, 420);  //BGM１番フェードアウト
        _pBgmPerformer->play(2, DSBVOLUME_MIN, true); //BGM２番フェードイン
        _pBgmPerformer->fadein(2, 420);
        changeProgress(STAGE02CONTROLLER_SCENE_PROG_STG02_CLIMAX_PLAYING);
    } else if (getProgress() == STAGE02CONTROLLER_SCENE_PROG_STG02_CLIMAX_PLAYING) {
        //STG02_Climax最中の処理

    }

    if (onActiveProgress(STAGE02CONTROLLER_SCENE_PROG_FAINAL)) {
        //STG02_Climax終焉の処理
        _TRACE_("STG02_Climax終焉のSTAGE02CONTROLLER_SCENE_PROG_FAINALきた");
        _pBgmPerformer->fadeout_stop(2, 420); //BGM１番フェードアウト
        _frame_prog_fainal = 0;
    } else if (getProgress() == STAGE02CONTROLLER_SCENE_PROG_FAINAL) {
        //STG02_Climax終焉最中の処理
        _frame_prog_fainal++;

        if (_frame_prog_fainal == 420) { //BGMフェードアウトを待つ。
            throwEventToUpperTree(EVENT_STAGE02CONTROLLER_WAS_END, this); //ステージエンドを上位に伝える
        }
    }

    if (getBehaveingFrame() == 2) {

    }

}

void Stage02Controller::processFinal() {
}

void Stage02Controller::catchEvent(UINT32 prm_no, void* prm_pSource) {
    if (prm_no == EVENT_STG02_01_WAS_BROKEN) {
        _TRACE_("Stage02Controller::catchEvent() EVENT_STG02_01_WAS_BROKEN");
        ((Stage02_01*)prm_pSource)->end(30*60);
    } else if (prm_no == EVENT_STG02_CLIMAX_WAS_BROKEN) {
        _TRACE_("Stage02Controller::catchEvent() EVENT_STG02_CLIMAX_WAS_BROKENキャッチした。STAGE02CONTROLLER_ENDINGを投げる");
        ((Stage02_Climax*)prm_pSource)->end(30*60);
        changeProgress(STAGE02CONTROLLER_SCENE_PROG_FAINAL); //進捗をSTAGE02CONTROLLER_SCENE_PROG_FAINALに切り替える
    } else {

    }
}

Stage02Controller::~Stage02Controller() {

}
